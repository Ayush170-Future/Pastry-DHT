Index: src/pastry_code/wireformats/NodeInformationMessage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pastry_code.wireformats;\r\nimport pastry_code.NodeAddress;\r\n\r\npublic class NodeInformationMessage extends Protocol {\r\n    // Node Identifier.\r\n    private byte[] id;\r\n    private NodeAddress nodeAddress;\r\n\r\n    NodeInformationMessage(byte[] id, NodeAddress nodeAddress) {\r\n        this.id = id;\r\n        this.nodeAddress = nodeAddress;\r\n    }\r\n\r\n    public byte[] getId() {\r\n        return id;\r\n    }\r\n\r\n    public NodeAddress getNodeAddress() {\r\n        return nodeAddress;\r\n    }\r\n\r\n    @Override\r\n    public int getMessageType() {\r\n        return NODE_INFO_MSG;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pastry_code/wireformats/NodeInformationMessage.java b/src/pastry_code/wireformats/NodeInformationMessage.java
--- a/src/pastry_code/wireformats/NodeInformationMessage.java	(revision 172b45ed4974cc10bd6588415de9f9917f4ccd89)
+++ b/src/pastry_code/wireformats/NodeInformationMessage.java	(date 1648289099857)
@@ -6,7 +6,7 @@
     private byte[] id;
     private NodeAddress nodeAddress;
 
-    NodeInformationMessage(byte[] id, NodeAddress nodeAddress) {
+    public NodeInformationMessage(byte[] id, NodeAddress nodeAddress) {
         this.id = id;
         this.nodeAddress = nodeAddress;
     }
Index: src/pastry_code/wireformats/ErrorMessage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package pastry_code.wireformats;\r\n\r\npublic class ErrorMessage extends Protocol{\r\n\r\n    // Error Message.\r\n    private String message;\r\n\r\n    ErrorMessage(String message) {\r\n        this.message = message;\r\n    }\r\n\r\n    public String getMessage() {\r\n        return message;\r\n    }\r\n\r\n    @Override\r\n    public int getMessageType() {\r\n        return ERROR_MSG;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pastry_code/wireformats/ErrorMessage.java b/src/pastry_code/wireformats/ErrorMessage.java
--- a/src/pastry_code/wireformats/ErrorMessage.java	(revision 172b45ed4974cc10bd6588415de9f9917f4ccd89)
+++ b/src/pastry_code/wireformats/ErrorMessage.java	(date 1648280118065)
@@ -5,7 +5,7 @@
     // Error Message.
     private String message;
 
-    ErrorMessage(String message) {
+    public ErrorMessage(String message) {
         this.message = message;
     }
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"a734ac05-85e4-43b0-ac59-2cae7066a8be\" name=\"Default Changelist\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"26k45dRYNZYqWA4QTTX0tBgcvuT\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"project.structure.last.edited\" value=\"Modules\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.15\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"random\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"random\" />\r\n      <module name=\"Pastry-DHT\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.random\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"a734ac05-85e4-43b0-ac59-2cae7066a8be\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1647954070052</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1647954070052</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 172b45ed4974cc10bd6588415de9f9917f4ccd89)
+++ b/.idea/workspace.xml	(date 1648289100292)
@@ -1,7 +1,13 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="a734ac05-85e4-43b0-ac59-2cae7066a8be" name="Default Changelist" comment="" />
+    <list default="true" id="a734ac05-85e4-43b0-ac59-2cae7066a8be" name="Default Changelist" comment="">
+      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/pastry_code/DiscoveryNode.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/pastry_code/wireformats/ErrorMessage.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/pastry_code/wireformats/ErrorMessage.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/pastry_code/wireformats/NodeInformationMessage.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/pastry_code/wireformats/NodeInformationMessage.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -13,8 +19,12 @@
         <option value="Class" />
       </list>
     </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
   <component name="ProjectId" id="26k45dRYNZYqWA4QTTX0tBgcvuT" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
@@ -22,6 +32,7 @@
   <component name="PropertiesComponent">
     <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
+    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
     <property name="last_opened_file_path" value="$PROJECT_DIR$" />
     <property name="project.structure.last.edited" value="Modules" />
     <property name="project.structure.proportion" value="0.15" />
@@ -52,4 +63,15 @@
     </task>
     <servers />
   </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
 </project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1648227635934)
+++ b/.idea/vcs.xml	(date 1648227635934)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/pastry_code/DiscoveryNode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/pastry_code/DiscoveryNode.java b/src/pastry_code/DiscoveryNode.java
new file mode 100644
--- /dev/null	(date 1648315912976)
+++ b/src/pastry_code/DiscoveryNode.java	(date 1648315912976)
@@ -0,0 +1,212 @@
+package pastry_code;
+
+import pastry_code.wireformats.*;
+
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.net.ServerSocket;
+import java.net.Socket;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Random;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+import java.util.logging.Logger;
+
+public class DiscoveryNode extends Thread {
+    private static final Logger LOGGER = Logger.getLogger(DiscoveryNode.class.getCanonicalName());
+    protected int port;
+    protected Map<byte[], NodeAddress> nodes;
+    protected ReadWriteLock readWriteLock;
+    private final Random random;
+
+    public DiscoveryNode(int port) {
+        this.port = port;
+        random = new Random();
+        nodes = new HashMap<>();
+        readWriteLock = new ReentrantReadWriteLock();
+    }
+
+    public static void main(String[] args) {
+        try {
+            if (args.length != 1) throw new Exception();
+            int port = Integer.parseInt(args[0]);
+
+            Thread discoveryNodeThread = new Thread(new DiscoveryNode(port));
+            discoveryNodeThread.start();
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        } finally {
+            System.out.println("Syntax: DiscoveryNode port");
+        }
+    }
+
+    public boolean isNodesListEmpty() {
+        readWriteLock.readLock().lock();
+        try {
+            return nodes.isEmpty();
+        } finally {
+            readWriteLock.readLock().unlock();
+        }
+    }
+
+    public byte[] getRandomNode() {
+        readWriteLock.readLock().lock();
+        try {
+            int randomID = random.nextInt(nodes.size());
+
+            for(byte[] ID: nodes.keySet()) {
+                if(randomID-- == 0) {
+                    return ID;
+                }
+            }
+            return null;
+        } finally {
+            readWriteLock.readLock().unlock();
+        }
+    }
+
+    public void addNode(byte[] id, NodeAddress nodeAddress) throws Exception{
+        readWriteLock.readLock().lock();
+
+        // Check if the ID is already present in the network or not?
+        try {
+            if(nodes.containsKey(id)) {
+                throw new Exception("ID " +HexConverter.convertBytesToHex(id) +" is already present in the Network");
+            }
+        } finally {
+            readWriteLock.readLock().unlock();
+        }
+
+        // Adding the node with the given ID in the network.
+        readWriteLock.readLock().lock();
+        try {
+            nodes.put(id, nodeAddress);
+        } finally {
+            readWriteLock.readLock().unlock();
+        }
+    }
+
+    protected void printActiveNodes() {
+        readWriteLock.readLock().lock();
+        try {
+            StringBuilder str = new StringBuilder("----ACTIVE NODES----");
+            for(Map.Entry<byte[],NodeAddress> entry : nodes.entrySet()) {
+                str.append("\n").append(HexConverter.convertBytesToHex(entry.getKey())).append(" : ").append(entry.getValue());
+            }
+            str.append("\n--------------------");
+            LOGGER.info(str.toString());
+        } finally {
+            readWriteLock.readLock().unlock();
+        }
+    }
+
+    @Override
+    public void run() {
+        try {
+            // Creating a Server Socket for receiving the requests from the network.
+            ServerSocket serverSocket = new ServerSocket(port);
+
+            // Accepts Connection.
+            while(true) {
+                Socket socket = serverSocket.accept();
+                System.out.println("Received Connection from: " +socket.getInetAddress() +":" +socket.getPort() +".");
+
+                Thread subThread = new Thread(new DiscoveryNodeWorker(socket));
+                subThread.start();
+            }
+
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    // This is the Thread which takes the Node Request and answer accordingly.
+    private class DiscoveryNodeWorker extends Thread {
+        protected Socket socket;
+
+        public DiscoveryNodeWorker(Socket socket) {
+            this.socket = socket;
+        }
+
+        @Override
+        public void run() {
+
+            try {
+                // Reading request message from the connection.
+                ObjectInputStream input = new ObjectInputStream(socket.getInputStream());
+                Protocol requestMessage = (Protocol) input.readObject();  // Compile-time casting.
+                Protocol replyMessage = null;
+
+                switch (requestMessage.getMessageType()) {
+
+                    case Protocol.REGISTER_NODE_MSG:
+                        RegisterNodeMessage registerNodeMessage = (RegisterNodeMessage) requestMessage;  // Down-casting to the subclass object for using the subclass specific methods.
+                        try {
+                            readWriteLock.readLock().unlock();
+
+                            // If this new node is the first node in the cluster then don't need to do anything.
+                            if(isNodesListEmpty()) {
+                                replyMessage = new SuccessMessage();
+                            } else {
+
+                                // Else we will pass a Random node to the new node for adding it's self in the network.
+                                byte[] randomID = getRandomNode();
+
+                                replyMessage = new NodeInformationMessage(randomID, nodes.get(randomID));
+                            }
+
+                            addNode(registerNodeMessage.getId(), new NodeAddress(registerNodeMessage.getNodeName(),
+                                    socket.getInetAddress(), registerNodeMessage.getPort()));
+
+                        } catch (Exception e) {
+                            replyMessage = new ErrorMessage(e.getMessage());
+                        } finally {
+                            readWriteLock.readLock().unlock();
+                        }
+
+                        // Print the active Nodes.
+                        printActiveNodes();
+                        break;
+
+                    case Protocol.REQUEST_RANDOM_NODE:
+                        readWriteLock.readLock().lock();
+                        try {
+                            if(isNodesListEmpty()) {
+
+                                replyMessage = new ErrorMessage("The list of Nodes is empty");
+
+                            } else {
+
+                                byte[] id = getRandomNode();
+                                replyMessage = new NodeInformationMessage(id, nodes.get(id));
+
+                            }
+                        } catch (Exception e) {
+                            replyMessage = new ErrorMessage(e.getMessage());
+                        } finally {
+                            readWriteLock.readLock().unlock();
+                        }
+                        break;
+
+                    default:
+                        LOGGER.severe("Unrecognized request message type '" + requestMessage.getMessageType() + "'");
+                        break;
+                }
+
+                // Sending the reply message to the calling Node.
+                if(replyMessage != null) {
+                    ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
+                    out.writeObject(replyMessage);
+                }
+
+            } catch (IOException | ClassNotFoundException e) {
+                e.printStackTrace();
+                LOGGER.severe(e.getMessage());
+            }
+        }
+    }
+
+}
